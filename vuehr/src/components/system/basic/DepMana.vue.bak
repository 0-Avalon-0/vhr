<template>
  <div>
    <!--    <el-container>
          &lt;!&ndash;      <el-header style="padding: 0px;display:flex;justify-content:flex-start;align-items: flex-start;height: 28px;">
                  <el-button type="primary" size="mini" style="margin-left: 5px" icon="el-icon-plus">添加部门</el-button>
                </el-header>&ndash;&gt;
          <el-main style="padding: 0px;margin-top: 10px">-->
    <div style="text-align: left">
      <el-input
        placeholder="输入部门名称搜索部门..."
        style="width: 500px;margin: 0px;padding: 0px;"
        size="mini"
        prefix-icon="el-icon-search"
        v-model="keywords">
      </el-input>
    </div>
    <div>
      <el-tree
        :props="defaultProps"
        :load="loadNode"
        lazy
        v-loading="treeLoading"
        node-key="id"
        style="width: 500px"
        :render-content="renderContent">
      </el-tree>
    </div>
    <!--      </el-main>
        </el-container>-->
  </div>
</template>
<script>
  let id = 1000;
  export default {
    data() {
      return {
        keywords: '',
        treeLoading:false,
        defaultProps: {
          label: 'name',
          isLeaf: 'leaf'
        }
      }
    },

    methods: {
      loadNode(node, resolve) {
        var pid;
        if (node.data == undefined) {
          pid = -1;
        }else{
          pid = node.data.id;
        }
        this.getRequest("/system/basic/dep/"+pid).then(resp=> {
          if (resp && resp.status == 200) {
            resolve(resp.data);
          }
        })
      },
      append(data) {
        const newChild = {id: id++, label: 'testtest', children: []};
        if (!data.children) {
          this.$set(data, 'children', []);
        }
        data.children.push(newChild);
      },

      remove(node, data) {
        const parent = node.parent;
        const children = parent.data.children || parent.data;
        const index = children.findIndex(d => d.id === data.id);
        children.splice(index, 1);
      },
      addDep(node,data,event){

        event.stopPropagation()
      },
      deleteDep(node,data,event){
        if(!data.leaf) {
          this.$message({
            message: '该部门下尚有其他部门，不能被删除!',
            type: 'warning'
          });
        }else{
          this.treeLoading = true;
          this.deleteRequest("/system/basic/dep/" + data.id).then(resp=>{
          this.treeLoading = false;

          });
        }
        event.stopPropagation()
      },
      renderContent(h, {node, data, store}) {
        return (
          <span style="flex: 1; display: flex; align-items: center; justify-content: space-between; font-size: 14px; padding-right: 8px;">
          <span>
          <span>{node.label}</span>
        </span>
        <span>
        <el-button style="font-size: 12px;" type="primary" size="mini" style="padding:3px" on-click={ () => this.addDep(node,data,event) }>添加部门</el-button>
        <el-button style="font-size: 12px;" type="danger" size="mini" style="padding:3px" on-click={ () => this.deleteDep(node, data,event) }>删除部门</el-button>
        </span>
        </span>);
      }
    }
  };
</script>
